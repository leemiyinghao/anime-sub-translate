from typing import (
    Optional,
)

from .base_task import (
    IBaseTask,
    MessageTrait,
    NormalCharLimitTrait,
)
from .dto import (
    MetadataDTO,
    SubtitleDeltaDTO,
    SubtitleDTO,
    TermBankDTO,
)
from .utils import clear_indentation


def _check_equal(request: SubtitleDTO, response: SubtitleDeltaDTO) -> bool:
    old_ids = set([i.id for i in request.dialogues])
    new_ids = set(response.dialogues.keys())
    if old_ids != new_ids:
        return False
    return True


class TranslateTask(
    NormalCharLimitTrait,
    MessageTrait,
    IBaseTask[SubtitleDeltaDTO],
):
    """
    CollectContextTask is a subclass of BaseTask that represents a task for collecting context.
     It contains methods to handle the request and response DTOs.

    Note: Prompts are generated by Meta Prompting and fine-tuned by human.
    """

    _response_dto = SubtitleDeltaDTO
    _dialogues: SubtitleDTO
    _term_bank: Optional[TermBankDTO]
    _metadata: Optional[MetadataDTO]
    _target_language: str
    _char_limit: int

    def __init__(
        self,
        dialogues: SubtitleDTO,
        term_bank: Optional[TermBankDTO] = None,
        metadata: Optional[MetadataDTO] = None,
        target_language: str = "English",
        char_limit: Optional[int] = None,
    ):
        """
        Initializes the CollectTermBankTask with the given dialogues, metadata, target language, and character limit.

        :param dialogues: List of subtitle dialogues.
        :param metadata: Optional metadata for the media set.
        :param target_language: Target language for translation.
        :param char_limit: Character limit for the task.
        """
        self._dialogues = dialogues
        self._term_bank = term_bank
        self._metadata = metadata
        self._target_language = target_language
        self._char_limit = char_limit or (
            len(self._dialogues.model_dump_json(exclude_none=True)) * 2
        )

    def context_prompt(self) -> str:
        """
        Returns the context prompt for the task.

        :return: The context prompt for the task.
        """
        prompt = clear_indentation(
            f"""
            Dialogues:
            ```json
            {self._dialogues.model_dump_json(exclude_none=True)}
            ```
            """
        )

        if self._metadata:
            prompt += clear_indentation(
                f"""
            Introduction:
            ```
            {self._metadata.to_plain()}
            ```
            """
            )

        if self._term_bank:
            prompt += clear_indentation(
                f"""
            Term Bank:
            ```
            {self._term_bank.as_plain()}
            ```
            """
            )

        return prompt

    def action_prompt(self) -> str:
        """
        Returns the action prompt for the task.

        :return: The action prompt for the task.
        """
        format = '{"dialogues": {"${id}": "${translated content}", ...}}'
        return clear_indentation(
            f"""

            Provide translation of the dialogues to {self._target_language} with the following guidelines:
            - Ensuring that each dialogue is included and the original dialogue IDs are preserved in the output.
            - Refer to the provided Introduction and Term Bank to ensure consistent translation of key terms.
            - Consider the context of the dialogues and translate them with character identity, cultural nuance, and plot significance in mind.

            Output your result strictly in the following JSON format:
            ```json
            {format}
            ```
            """
        )

    def sanity_check(self, response: SubtitleDeltaDTO) -> bool:
        """
        Sanity check for the response.

        :param response: The response DTO.
        :return: True if the response is valid, False otherwise.
        """
        return _check_equal(self._dialogues, response)

    def __eq__(self, other):
        if not isinstance(other, TranslateTask):
            return False
        return (
            self._dialogues == other._dialogues
            and self._term_bank == other._term_bank
            and self._metadata == other._metadata
            and self._target_language == other._target_language
            and self._char_limit == other._char_limit
        )


# TODO: Refine Translation Task
# In theory, a refine process after translation should improve the translation quality.
# However, during the testing, it seems that refining the translation might end up with meaningful loss.
# If better prompt is found, we can consider to add this task.
